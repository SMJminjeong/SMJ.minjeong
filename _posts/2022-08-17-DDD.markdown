---
layout: post
title:  "DDD(도메인 주도 설계) 1. 도메인 주도 설계란?"
date:   2022-08-17 21:22:54 +0900
categories: jekyll update
---
## 1. 도메인 주도 설계란?

### 1.1 도메인 주도 설계란?

- 개발자는 이용자들이 겪는 문제를 해결하려면 이용자의 세계에 대해 배워야 함
    - 이용자에게 유용한 소프트웨어를 개발하려면?
        - 가치 있는 지식과 그렇지 않은 지식을 신중하게 구분해서 가치 있는 지식을 코드에 녹여야 함
        - = 유용한 지식을 정리해놓은 문서
        - 이용자의 문제가 무엇인지 파악 → 해결 가능한 최선의 수단 생각

> 도메인 주도 설계는 이러한 고찰을 반복하는 설계를 통해 이용자의 세계와 소프트웨어 구현을 연결 짓는 것이 그 목적이다.
> 

### 1.2 도메인 지식에 초점을 맞춘 설계 기법

### 도메인이란?

- 도메인이란 ‘영역’이다.
    - 개발에서의 도메인이란 ‘프로그램이 쓰이는 대상 분야’라는 의미이다.
    
    ‘도메인에 포함되는 것이 무엇일까?’
    
    > 기술을 중시하는 개발자는 기술적 접근법으로만 문제를 해결하려 한다. 그 결과 목적 없는 소프트웨어가 만들어지는 참사가 발생한다. 
    → 소프트웨어가 사용될 분야(도메인)의 지식에 초점을 맞춰야 한다.
    > 
    
    > 프랙티스 : 이를 실천하는 과정을 보조하는 수단
    
### 1.2.1 도메인 모델링이란?

- 모델링의 정의를 묻는다면 답할 수 있는가.
    - 모델 : 현실에 일어나는 사건 혹은 개념을 추상화한 개념
        - 추상화 : 여러 사물 혹은 개념에서 공통적인 것을 뽑아 파악 =! 현실의 모든 것 반영
    - 모델링 : 사건 혹은 개념을 추상화하는 작업
    - 모델링의 결과 = 모델
        - 도메인 개념을 모델링한 모델 = 도메인 모델
        
        ※ 도메인 관계자는 소프트웨어에 대한 지식이 부족하고, 개발자는 도메인에 대한 지식이 부족하다. 따라서 각 분야별로 협력하여 도메인 모델을 만들어야 한다.
### 1.2.1 지식을 코드로 나타내는 도메인 객체

- ① 도메인 모델은 어떤 매체를 통해 표현되어야 힘을 갖는다.
    - 도메인 객체 : 도메인 모델을 소프트웨어 형태의 동작하는 모듈로 나타낸 것
        
        ※ 개발자는 유용한 모델과 그렇지 않은 모델을 구분해야 한다.
        
        도메인에 발생한 변화는 우선 도메인 모델로 전달돼야 한다.
        
        → 도메인 객체 = 도메인 모델이 구현된 표현 → 변화한 도메인 모델과 아직 변화하지 않은 도메인 객체를 비교 → 어디를 고쳐야 할지 알 수 있음
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e812a47a-07c2-4006-806d-8a6dc66bced8/Untitled.png)
        
        도메인 객체는 도메인 모델을 통해 연결 되며 서로 영향을 주고받는 반복적 개발로 실현
        
### 1.3 이 책의 접근법과 목표

- 상대적으로 이해하기 쉽고 실천하기도 쉬운 구현 패턴에 집중 = 상향식(Bottom-up)
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/eb236b5f-86f3-43ec-97c4-15cdb3427eee/Untitled.png)
    
- 도메인 주도 설계 = 소프트웨어 개발 분야 테마
    - 도메인에 종사하는 실무자의 관점 없이는 불가능, 도움이 필요
        
        하지만 개발자 개인이 재량으로 실천할 수 있는 프랙티스도 존재
        
### 1.4 이 책에서 설명하는 패턴

- 용어 간의 관계
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7fa533ae-64bb-4dbf-870d-362d550c5c4d/Untitled.png)
    
- 1.4.1 지식 표현을 위한 패턴
    - 도메인 객체 이해
        - 값 객체 ▷ 엔티티 ▷ 도메인 서비스
- 1.4.2 애플리케이션을 구성하기 위한 패턴
    - 애플리케이션 구성 이해
        - 리포지토리 ▷ 애플리케이션 서비스 ▷ 웹 애플리케이션 ▷ 팩토리 패턴
- 1.4.3 지식 표현을 위한 고급 패턴
    - 애그리게이트 ▷ 명세

> 소프트웨어는 항상 진화하는 존재다. 시대의 변화에 뒤처지지 않기 위해 개발자는 수정을 계속해 나간다. 끝없는 땜질식 수정 업무에서 벗어나기 위한 수단 중 하나가 도메인 주도 설계이다.

도메인 주도 설계는 도메인에 주목해 요구사항 분석부터 설계, 개발에 이르기까지 소프트웨어 개발 과정에 상호작용이 필요하다.
>
[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
